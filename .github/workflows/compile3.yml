name: Compile

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        py: ['tiger']
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip        
        pip install .
        pip install pyinstaller onnxruntime

    - name: PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller -c -p ./tigerbx --icon=./tigerbx/exe/ico.ico \
          --add-data "./tigerbx/exe/onnxruntime_providers_shared.dll;onnxruntime/capi" \
          -F ./tigerbx/${{ matrix.py }}.py

    - name: PyInstaller (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        pyinstaller -c -p ./tigerbx --icon=./tigerbx/exe/ico.ico \
          --add-data ./tigerbx/exe/libonnxruntime_providers_shared.so:onnxruntime/capi \
          -F ./tigerbx/${{ matrix.py }}.py

    - name: Package artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir release
        copy dist\* release\
        powershell -Command "Compress-Archive -Path release\* -DestinationPath release-${{ github.run_number }}.zip"

    - name: Package artifacts (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        zip -r release-${{ github.run_number }}.zip dist/

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.os }}
        path: release-${{ github.run_number }}.zip

  release:
    needs: build
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # 先下載 build job 的 artifact
    - name: Download built zip (choose the OS you want)
      uses: actions/download-artifact@v3
      with:
        name: release-ubuntu-latest   # 或 windows-latest/macOS-latest
        path: ./release

    - name: Create Draft Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        draft: true
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/release-${{ github.run_number }}.zip
        asset_name: python-main-${{ github.run_number }}.zip
        asset_content_type: application/zip
